{"version":3,"sources":["Components/card.js","Components/cardList.js","Components/searchbox.js","Components/scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","className","alt","src","CardList","robots","map","user","i","key","Searchbox","searchchange","style","padding","type","placeholder","onChange","Scroll","props","overflowY","border","height","margin","children","App","OnSearchChange","event","setState","searchfield","target","value","state","robotArray","fetch","then","response","json","users","filterdRobots","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mSAgBeA,MAZf,YAAkC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,GAAIC,EAAQ,EAARA,MACvB,OACE,yBAAKC,UAAU,gCACd,yBAAKA,UAAU,WAAWC,IAAI,QAAQC,IAAG,+BAA0BJ,EAA1B,cACzC,6BACE,wBAAIE,UAAU,aAAaH,GAC3B,uBAAGG,UAAU,cAAcD,MCYnBI,MAnBf,YAA6B,IAAVC,EAAS,EAATA,OAClB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLT,GAAIM,EAAOG,GAAGT,GACdD,KAAMO,EAAOG,GAAGV,KAChBE,MAAOK,EAAOG,GAAGR,aCGRU,MAdf,YAAmC,IAAfC,EAAc,EAAdA,aACnB,OACC,yBAAKV,UAAU,OACd,2BACAW,MAAO,CAACC,QAAQ,sBAChBZ,UAAU,mBACVa,KAAK,SACLC,YAAY,gBACZC,SAAUL,MCKEM,MAbf,SAAiBC,GAChB,OACC,yBAAKN,MAAO,CACXO,UAAW,SACXC,OAAQ,MACRC,OAAO,QACPC,OAAO,gBACPT,QAAQ,QACPK,EAAMK,WCiCKC,G,wDApCd,aAAc,IAAD,8BACZ,gBAcDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAdzC,EAAKC,MAAQ,CACZC,WAAY,GACZJ,YAAa,IAJF,E,gEAQO,IAAD,OAClBK,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,WAAYK,S,+BAQlC,IAAD,OACDC,EAAgBC,KAAKR,MAAMC,WAAWQ,QAAO,SAAAC,GACjD,OAAOA,EAAM3C,KAAK4C,cAAcC,SAAS,EAAKZ,MAAMH,YAAYc,kBAElE,OACC,yBAAKzC,UAAU,MACd,wBAAIA,UAAU,iBAAd,eACA,uBAAGA,UAAU,cAAb,wCACA,kBAAC,EAAD,CAAWU,aAAgB4B,KAAKd,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUpB,OAAQiC,U,GA9BLM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACC,kBAAC,EAAD,QAGHC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e38d2ae6.chunk.js","sourcesContent":["import React from 'react';\nimport 'tachyons';\nimport './card.css';\n\nfunction Card({name, id, email}) {\n  return (\n    <div className='tc card-box dib br3 ma3 grow'>\n\t    <img className='card-img' alt='robot' src={`https://robohash.org/${id}?100x100`} />\n\t    <div>\n\t      <h1 className='card-name'>{name}</h1>\n\t      <p className='card-email'>{email}</p>\n\t    </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\r\nimport Card from './card.js';\r\n\r\nfunction CardList({robots}) {\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map((user, i) =>{\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nfunction Searchbox({searchchange}){\r\n\treturn(\r\n\t\t<div className='pa4'>\r\n\t\t\t<input \r\n\t\t\tstyle={{padding:'10px 7px 10px 10px'}}\r\n\t\t\tclassName='searchbox br2 ba' \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robots' \r\n\t\t\tonChange={searchchange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nfunction Scroll (props) {\r\n\treturn(\r\n\t\t<div style={{\r\n\t\t\toverflowY: 'scroll', \r\n\t\t\tborder: '1px', \r\n\t\t\theight:'700px',\r\n\t\t\tmargin:'0 1em 6em 1em',\r\n\t\t\tpadding:'0px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../Components/cardList.js';\r\nimport Searchbox from '../Components/searchbox.js';\r\nimport Scroll from '../Components/scroll.js';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobotArray: [],\r\n\t\t\tsearchfield: '',\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({robotArray: users}));\r\n\t\t\r\n\t}\r\n\r\n\tOnSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value});\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst filterdRobots = this.state.robotArray.filter(robot => {\r\n\t\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t\t});\r\n\t\treturn(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='main-title tc'>ROBOFRIENDS</h1>\r\n\t\t\t\t<p className='title-decs'>All your robot friends in one place.</p>\r\n\t\t\t\t<Searchbox searchchange = {this.OnSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filterdRobots} />\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\t\t\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport './index.css';\nimport App from './Containers/App.js';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n    \t<App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}